import { useInfiniteQuery } from "@tanstack/react-query";
import { useEffect, useMemo, useState } from "react";
import useSWR from "swr";
import { useInView } from "react-intersection-observer";
import axios from "axios";
import {
  Button,
  Icon,
  Tag,
} from "@blueprintjs/core";
import { format, formatDistance, isBefore } from "date-fns";
import { setCookie, getCookie } from "cookies-next";
import Link from "next/link";
import Spotify from "../public/spotify.svg";
import Share from "../public/share.svg";

import LoadingComp from "../components/loading";
import React from "react";
import Preview from "../components/preview";
import Navbar from "../components/navbar";
import Head from "next/head";
import FooterComp from "../components/footer";

export const fetcher = (url: string) => fetch(url).then((res) => res.json());
const pageSize = 50;
export default function Web() {
  const [openInApp, setOpenInApp] = useState<any>(false);
  const [lastVisit, setLastVisit] = useState<any>();
  const [now, setNow] = useState<any>();
  const { ref, inView } = useInView();
  const [hideDiscoverWeekly, setHideDiscoverWeekly] = useState<any>(true)
  const { data: topartists, error: pl_error } = useSWR(
    `/api/artists`,
    fetcher
  );

  const {
    data,
    fetchNextPage,
    hasNextPage,
    isFetching,
  }: any = useInfiniteQuery(
    ["security"],
    async ({ pageParam = 0 }) => {
      const res = await axios.get(
        "/api/songs?c=" + pageParam + "&p=" + pageSize
      );
      return res.data;
    },
    {
      refetchInterval: 60000,
      getPreviousPageParam: (firstPage) => firstPage.previusCursor,
      getNextPageParam: (lastPage) => lastPage.nextCursor,
    }
  );

  useEffect(() => {
    setLastVisit(getCookie("left") || new Date());
    return () => {
      setCookie("left", new Date());
    };
  }, []);

  useEffect(() => {
    setTimeout(() => {
      setNow(format(new Date(), "MM/dd/yyyy - h:m:ss"));
    }, 1000);
  }, [now]);

  useEffect(() => {
    if (inView) {
      fetchNextPage();
    }
  }, [fetchNextPage, inView]);

  const topartistsname = useMemo(() => {
    if (topartists) {
      return topartists.data.map((artist: any) => artist.name)
    }

  }, [topartists])

  if (!data || !topartists) return <LoadingComp />;

  return (
    <><Head>
      <title>POKING - frogTech.dev</title>
      <meta name="description" content="Generated by create next app" />
      <link rel="icon" href="/favicon.ico" />
    </Head>
      <div className="min-h-screen w-full bg-neutral-900 bp4-dark">
        {/* <div className="opacity-50 flex gap-5 justify-center px-4">
          <div>
            now: {now}
          </div>
          <div>
            last visit {formatDistance(new Date(lastVisit), new Date(), { addSuffix: true })}
          </div>
          <div>
            last item added {formatDistance(new Date(data.pages[0].data[0].addedAt), new Date(), { addSuffix: true })} - {data.pages[0].data[0].name}
          </div>
        </div>
        */}
        <div className="container mx-auto p-1">
          <Navbar isFetching={isFetching} openInApp={openInApp} setOpenInApp={setOpenInApp} hideDiscoverWeekly={hideDiscoverWeekly} setHideDiscoverWeekly={setHideDiscoverWeekly} />
          <div className="mt-2">
            <div className="flex gap-3 flex-wrap text-white overflow-scroll h-[calc(100vh-120px)]">
              {data &&
                data.pages.map((page: any) => {
                  return (
                    <React.Fragment key={page.nextCursor}>
                      {page.data.map((song: any, index: any) => {
                        // TODO: we should upload playlist owner and check who's playlist it is
                        if (song.playlists[0].name.includes('Discover Weekly') && hideDiscoverWeekly) return
                        return (
                          <div
                            key={song.name}
                            className=" bg-slate-900 shadow-md rounded h-[56px] flex flex-col relative grow overflow-hidden"
                          >
                            <div className="!z-10 w-full p-2 bg-opacity-90 items-center gap-2 rounded bg-neutral-800">
                              <div className="flex gap-2 justify-start items-center">
                                {isBefore(
                                  new Date(lastVisit),
                                  new Date(song.addedAt)
                                ) && <Tag intent="success">NEW</Tag>}
                                <Preview song={song} />

                                <h4 className="text-white mix-blend-difference text-[15px] leading-relaxed truncate max-w-sm font-semibold">
                                  {song.name.replace(/\(([^)]+)\)/, "")}
                                </h4>
                                <p className="p-0 m-0 leading-relaxed">by</p>
                                <div className="flex gap-1 leading-relaxed">
                                  {song.artists.map((e: any, i: any) => {

                                    return (
                                      <Link
                                        href={openInApp
                                          ? `spotify:artist:${e.sid}`
                                          : e.externalUrl}
                                      >
                                        <Tag
                                          key={i}
                                          className="!bg-neutral-900 !text-neutral-300"
                                        >
                                          {e.name}

                                        </Tag>
                                        {topartistsname.indexOf(e.name) !== -1 &&
                                          <Tag minimal title={`${e.name} is the #${topartistsname.indexOf(e.name) + 1} most added artist `}>
                                            #{topartistsname.indexOf(e.name) + 1}
                                            {topartistsname.indexOf(e.name) === 0 && "ðŸ”¥"}
                                          </Tag>

                                        }
                                      </Link>
                                    );
                                  })}
                                </div>
                                {song.playlists[0].name.includes('Discover Weekly')
                                  && <Tag intent="warning" minimal title="These songs are added by spotify"><Icon icon="function" /></Tag>}
                              </div>
                              <div className="!z-10 flex items-center gap-1">
                                <div className="opacity-50 mix-blend-difference grow ml-8 text-white text-xs text-left">
                                  added{" "}
                                  {formatDistance(
                                    new Date(song.addedAt),
                                    new Date(),
                                    {
                                      addSuffix: true,
                                    }
                                  )}
                                  to{" "}
                                  <Link
                                    className="!text-white underline"
                                    href={openInApp
                                      ? `spotify:playlist:${song.playlists[0].sid}`
                                      : song.playlists[0].externalUrl}
                                  >
                                    {song.playlists[0].name}
                                  </Link>
                                </div>
                                <Link
                                  href={openInApp
                                    ? `spotify:track:${song.sid}`
                                    : song.externalUrl}
                                >
                                  {openInApp ? (
                                    <Spotify
                                      fill={"#1DB954"}
                                      className={"mix-blend-difference opacity-50"}
                                      height={12}
                                      width={12} />
                                  ) : (
                                    <Share
                                      fill={"#ffffff"}
                                      className={"mix-blend-difference opacity-50"}
                                      height={12}
                                      width={12} />
                                  )}
                                </Link>
                              </div>
                            </div>
                            {song.images[0] && (
                              <div
                                className="h-[56px] rounded bg-cover bg-center w-full absolute !z-0 brightness-50"
                                style={{
                                  backgroundImage: `url(${song.images[0].url || ""})`,
                                }} />
                            )}
                          </div>
                        );
                      })}
                    </React.Fragment>
                  );
                })}

              <Button
                disabled={!hasNextPage || isFetching}
                onClick={() => fetchNextPage()}
                className="h-[30px]"
                elementRef={ref}
                minimal
                fill
              >
                Load More
              </Button>
            </div>
          </div>

          <FooterComp openInApp={openInApp} />

        </div>
      </div></>
  );
}
